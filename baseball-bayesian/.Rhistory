test <- df[i,]
#obj <- glm(data=train, candies ~ .-id-level-bestfriend-control, family=poisson(link="log"))
#pred <- 3*predict.glm(obj, newdata=test, type="response")
pred[i] <- 3*exp(x[i,] %*% b.cv[,i])
#bias[i] <- pred - y[i]
#mse[i] <- bias[i]^2
}
mean(pred) # mean prediction
mean(pred - 3*y) # mean bias
sqrt((mean(pred-3*y)^2)) # RMSE
sqrt(mean((pred-3*y)^2)) # RMSE
mean((pred-3*y)^2)
sqrt(sum((3*y - mu.hat)^2) / 64)
apply(as.matrix(sims), 2, mean)
apply(as.matrix(sims), 2, quantile, c(.025,.975))
ggplot(data=acf1, mapping=aes(x=lag, y=acf)) +
geom_bar(stat="identity", position="identity") +
ylab(TeX("$\\frac{1}{6} \\sum_{j=0}^5 \\beta_j$")) + xlab("Mean Autocorrelation of 0.265") +
ggtitle("Log Link") +
theme(
axis.title.y = element_text(margin=margin(0, 10, 0, 0), angle = 0, vjust=0.5, size=30),
axis.title.x = element_text(margin=margin(10, 0, 0, 0), size=20),
plot.title = element_text(size=20, hjust=0.5)
)
ggplot(data=acf2, mapping=aes(x=lag, y=acf)) +
geom_bar(stat="identity", position="identity") +
ylab(TeX("$\\frac{1}{6} \\sum_{j=0}^5 \\beta_j$")) + xlab("Mean Autocorrelation of 0.303") +
ggtitle("Root Link") +
theme(
axis.title.y = element_text(margin=margin(0, 10, 0, 0), angle = 0, vjust=0.5, size=30),
axis.title.x = element_text(margin=margin(10, 0, 0, 0), size=20),
plot.title = element_text(size=20, hjust=0.5)
)
summary(obj)
apply(as.matrix(sims), 2, mean)
apply(as.matrix(sims), 2, quantile, c(.025,.975))
plot(df$pokeballs, df$candies)
plot(df$pokeballs, 3*df$candies)
plot(df$time, 3*df$candies)
plot(df$pokeballs, df$candies)
abline(a=3.5, b=-3)
abline(a=3.5, b=-1/3)
plot(df$pokeballs, 3*df$candies)
abline(a=3.5, b=-1/3)
abline(a=3.5, b=-3)
abline(a=10, b=-1/3)
abline(a=18, b=-1/3)
abline(a=15, b=-1/3)
abline(a=13, b=-1/3)
abline(a=15, b=-2/3)
plot(df$pokeballs, 3*df$candies)
abline(a=15, b=-2/3)
summary(lm(data=df, 3*candies ~ pokeballs))
abline(a=8.22, b=-0.2295)
plot(df$time,3*df$candies)
exp(0.52)
exp(0.86)
exp(0.17)
exp(0.87)
b
apply(sims, 2, quantile, c(.025, .975))
exp(1.2)
sd(3*df$candies)
sd(df$candies)
sd(df$candies)*3
fitRoot <- function(i, nIter=3300, nBurn=300) {
train <- df[-i,]
x <- x[-i,]
y <- y[-i]
mod.sim <- jags(data=data.jags,inits=NULL,
parameters.to.save=parms,
model.file='poisson-sqrt.txt',n.iter=nIter,
n.burnin=nBurn,n.chains=nCores,n.thin=5,
jags.seed=8)
chains <- as.matrix(as.mcmc(mod.sim))
unname(apply(as.matrix(chains)[,-7], 2, mean))
}
b.cv.root <- sapply(1:64, fitRoot)
pred <- matrix(0, nrow=62, ncol=2)
for (i in 1:64) {
train <- df[-i,]
test <- df[i,]
pred[i,1] <- 3*exp(x[i,] %*% b.cv[,i])
pred[i,2] <- 3*(x[i,] %*% b.cv.root[,i])^2
}
dim(b.cv)
dim(b.root.cv)
dim(b.cv.root)
i
x[i,] %*% b.cv.root[,i]
3*(x[i,] %*% b.cv.root[,i])^2
i
pred <- matrix(0, nrow=64, ncol=2)
for (i in 1:64) {
train <- df[-i,]
test <- df[i,]
pred[i,1] <- 3*exp(x[i,] %*% b.cv[,i])
pred[i,2] <- 3*(x[i,] %*% b.cv.root[,i])^2
}
# Log link
mean(pred[,1]) # mean prediction
mean(pred[,1] - 3*y) # mean bias
sqrt(mean((pred[,1]-3*y)^2)) # out of sample RMSE
# Root link
mean(pred[,2]) # mean prediction
mean(pred[,2] - 3*y) # mean bias
sqrt(mean((pred[,2]-3*y)^2)) # out of sample RMSE
mean(simsRoot[,7])
bRoot <- as.matrix(apply(simsRoot, 2, mean)[-7])
mu.hat.root <- 3*exp(x%*%bRoot)
sqrt(sum((3*y - mu.hat.root)^2) / 64) # in sample RMSE (root)
sqrt(sum((3*y - mu.hat)^2) / 64) # in sample RMSE (log)
sqrt(sum((3*y - mu.hat.root)^2) / 64) # in sample RMSE (root)
mu.hat.root <- 3*(x%*%bRoot)^2
sqrt(sum((3*y - mu.hat)^2) / 64) # in sample RMSE (log)
sqrt(sum((3*y - mu.hat.root)^2) / 64) # in sample RMSE (root)
sqrt(mean((pred[,1]-3*y)^2)) # out of sample RMSE
# Graph for percent changes by gym badge
ci <- as.matrix(apply(sims, 2, quantile, c(.025, .975))[-7])
ci
# Graph for percent changes by gym badge
ci <- as.matrix(apply(sims, 2, quantile, c(.025, .975))[-7], nrow=6, ncol=2)
ci
# Graph for percent changes by gym badge
ci <- as.matrix(apply(sims[,-7], 2, quantile, c(.025, .975)), nrow=6, ncol=2)
ci
# Graph for percent changes by gym badge
ci <- t(as.matrix(apply(sims[,-7], 2, quantile, c(.025, .975)), nrow=6, ncol=2))
ci
b
badges <- data.frame(LB=ci[,1], Est=b, UB=ci[,2])
badges
badges <- data.frame(LB=ci[,1], Est=b, UB=ci[,2])[4:6]
badges
badges <- data.frame(LB=ci[,1], Est=b, UB=ci[,2])[4:6,]
badges
badges <- exp(badges)
badges
badges <- exp(badges) - 1
badges
badges <- data.frame(LB=ci[,1], Est=b, UB=ci[,2])[4:6,]
badges <- exp(badges) - 1
badges
badges <- data.frame(Badge=c("Bronze", "Silver", "Gold"), badges)
ggplot(data=badges, )
badges
library(plotrix)
plotCI(x=badges$Badge,y=badges$Est,li=badges$LB,ui=badges$UB,col=colors,lwd=2,
xlab='Index of Confidence Interval (19 intervals total)',
ylab='Range of 95% CI', main='Pairwise Confidence Intervals for Caffeine-Chair Model (Interactions Incldued)')
plotCI(x=badges$Badge,y=badges$Est,li=badges$LB,ui=badges$UB,col=colors,lwd=2,ylim=c(0,4)
xlab='Index of Confidence Interval (19 intervals total)',
ylab='Range of 95% CI', main='Pairwise Confidence Intervals for Caffeine-Chair Model (Interactions Incldued)')
plotCI(x=badges$Badge,y=badges$Est,li=badges$LB,ui=badges$UB,col=colors,lwd=2,ylim=c(0,4),
xlab='Index of Confidence Interval (19 intervals total)',
ylab='Range of 95% CI', main='Pairwise Confidence Intervals for Caffeine-Chair Model (Interactions Incldued)')
plotCI(x=1:3,y=badges$Est,li=badges$LB,ui=badges$UB,col=colors,lwd=2,ylim=c(0,4),
xlab='Index of Confidence Interval (19 intervals total)',
ylab='Range of 95% CI', main='Pairwise Confidence Intervals for Caffeine-Chair Model (Interactions Incldued)')
plotCI(x=1:3,y=badges$Est,li=badges$LB,ui=badges$UB,col=colors,lwd=2,ylim=c(0,4))
colors <- c("Red", "Blue", "Orange")
colors <- c("Red", "Blue", "Orange")
plotCI(x=1:3,y=badges$Est,li=badges$LB,ui=badges$UB,col=colors,lwd=2,ylim=c(0,4))
plotCI(x=1:3,y=badges$Est,li=badges$LB,ui=badges$UB,col=colors,lwd=2,ylim=c(-0.1,3))
plotCI(x=1:3,y=badges$Est,li=badges$LB,ui=badges$UB,col=colors,lwd=2,ylim=c(-0.1,2.5))
plotCI(x=badges$Badge,y=badges$Est,li=badges$LB,ui=badges$UB,col=colors,lwd=2,ylim=c(-0.1,2.5))
plotCI(x=1:3,y=badges$Est,li=badges$LB,ui=badges$UB,col=colors,lwd=2,ylim=c(-0.1,2.5))
abline(h=0,lwd=3)
plotCI(x=c(1,1.1,1.2),y=badges$Est,li=badges$LB,ui=badges$UB,col=colors,lwd=2,ylim=c(-0.1,2.5))
class(sims)
plotdf <- as.matrix(sims)[,-7]
dim(plotdf)
plotdf <- as.matrix(sims)[,4:6]
dim(plotdf)
plotdf <- as.data.frame(sims)[,4:6]
colnames(plotdf) <- c("bronze", "silver", "gold")
head(plotdf)
plot(1:16000, plotdf$bronze)
plot(1:160000, plotdf$bronze)
plotdf <- as.data.frame(sims)[sample(1:160000, 1000),4:6]
plot(1:160000, plotdf$bronze)
plot(1:1000, plotdf$bronze)
dim(plotdf)
head(plotdf)
plotdf <- as.data.frame(sims)[sample(1:160000, 1000),4:6]
colnames(plotdf) <- c("bronze", "silver", "gold")
plot(1:1000, plotdf$bronze)
plotdf <- as.data.frame(sims)[sample(1:160000, 10000),4:6]
colnames(plotdf) <- c("bronze", "silver", "gold")
plot(1:10000, plotdf$bronze)
points(1:10000, plotdf$silver)
plot(1:10000, plotdf$bronze)
points(1:10000, plotdf$silver, col="red")
points(1:10000, plotdf$gold, col="orange")
plot(1:10000, plotdf$bronze, ylim=c(-0.2, 2.5))
points(1:10000, plotdf$silver, col="red")
points(1:10000, plotdf$gold, col="orange")
plot(1:10000, plotdf$bronze, ylim=c(-0.2, 2.5), col="bronze")
plot(1:10000, plotdf$bronze, ylim=c(-0.2, 2.5), col="brown")
points(1:10000, plotdf$silver, col="greay")
points(1:10000, plotdf$silver, col="gray")
plot(1:10000, plotdf$bronze, ylim=c(-0.2, 2.5), col="brown", cex=3)
plot(1:10000, plotdf$bronze, ylim=c(-0.2, 2.5), col="brown", pch=16)
points(1:10000, plotdf$silver, col="gray", pch=16)
points(1:10000, plotdf$gold, col="orange", pch=16)
plot(1:10000, plotdf$bronze, ylim=c(-0.2, 2.5), col="brown", pch=16, cex=0.5)
points(1:10000, plotdf$silver, col="gray", pch=16, cex=0.5)
points(1:10000, plotdf$gold, col="orange", pch=16, cex=0.5)
plot(1:10000, plotdf$bronze, ylim=c(-0.2, 2.5), col="brown", pch=16, cex=0.25)
points(1:10000, plotdf$silver, col="gray", pch=16, cex=0.25)
points(1:10000, plotdf$gold, col="orange", pch=16, cex=0.25)
rm(plotdf)
# Graph for percent changes by gym badge
ci <- t(as.matrix(apply(sims[,-7], 2, quantile, c(.025, .975)), nrow=6, ncol=2))
badges <- as.data.frame(sims)[sample(1:160000, 10000),4:6]
colnames(badges) <- c("bronze", "silver", "gold")
badges <- exp(badges) - 1
plot(1:10000, badges$bronze, ylim=c(-0.2, 2.5), col="brown", pch=16, cex=0.25)
points(1:10000, badges$silver, col="gray", pch=16, cex=0.25)
points(1:10000, badges$gold, col="orange", pch=16, cex=0.25)
plot(1:10000, badges$bronze, ylim=c(-0.2, 2.5), col="brown", pch=16, cex=0.55)
points(1:10000, badges$silver, col="gray", pch=16, cex=0.55)
points(1:10000, badges$gold, col="orange", pch=16, cex=0.55)
plot(1:10000, badges$bronze, ylim=c(-0.2, 2.5), col="brown", pch=16, cex=0.55)
points(1:10000, badges$silver, col="dim gray", pch=16, cex=0.55)
points(1:10000, badges$gold, col="orange", pch=16, cex=0.55)
plot(1:10000, badges$bronze, ylim=c(-0.2, 2.5), col="chocolate", pch=16, cex=0.55)
points(1:10000, badges$silver, col="gray", pch=16, cex=0.55)
points(1:10000, badges$gold, col="orange", pch=16, cex=0.55)
plot(1:10000, badges$bronze, ylim=c(-0.2, 2.5), col="peru", pch=16, cex=0.55)
points(1:10000, badges$silver, col="gray", pch=16, cex=0.55)
points(1:10000, badges$gold, col="orange", pch=16, cex=0.55)
plot(1:10000, badges$bronze, ylim=c(-0.2, 2.5), col="brown", pch=16, cex=0.55)
points(1:10000, badges$silver, col="gray", pch=16, cex=0.55)
points(1:10000, badges$gold, col="orange", pch=16, cex=0.55)
ci
# Graph for percent changes by gym badge
ci <- t(as.matrix(apply(sims[,4:6], 2, quantile, c(.025, .975)), nrow=6, ncol=2))
ci
b
colnames(ci) <- c("LB", "UB")
abline(h=c(ci[1,]))
abline(h=c(ci[1,]), lwd=3, col="brown")
abline(h=ci[1,]) lwd=3, lty=2, col="brown")
abline(h=ci[1,] lwd=3, lty=2, col="brown")
plot(1:10000, badges$bronze, ylim=c(-0.2, 2.5), col="brown", pch=16, cex=0.55)
points(1:10000, badges$silver, col="gray", pch=16, cex=0.55)
points(1:10000, badges$gold, col="orange", pch=16, cex=0.55)
abline(h=ci[1,], lwd=3, lty=2, col="brown")
abline(h=b[4], lwd=3, col="brown")
abline(h=ci[2,], lwd=3, lty=2, col="gray")
abline(h=b[5], lwd=3, col="gray")
abline(h=ci[3,], lwd=3, lty=2, col="gold")
abline(h=b[6], lwd=3, col="gold")
plot(1:10000, badges$bronze, ylim=c(-0.2, 2.5), col="brown", pch=16, cex=0.5)
points(1:10000, badges$silver, col="gray", pch=16, cex=0.5)
points(1:10000, badges$gold, col="orange", pch=16, cex=0.5)
abline(h=ci[1,], lwd=3, lty=2, col="brown")
abline(h=b[4], lwd=3, col="brown")
abline(h=ci[2,], lwd=3, lty=2, col="gray")
plot(1:10000, badges$bronze, ylim=c(-0.2, 2.5), col="brown", pch=16, cex=0.25)
points(1:10000, badges$silver, col="gray", pch=16, cex=0.25)
points(1:10000, badges$gold, col="orange", pch=16, cex=0.25)
abline(h=ci[1,], lwd=3, lty=2, col="brown")
abline(h=b[4], lwd=3, col="brown")
abline(h=ci[2,], lwd=3, lty=2, col="gray")
abline(h=b[5], lwd=3, col="gray")
plot(1:10000, badges$bronze, ylim=c(-0.2, 2.5), col="brown", pch=16, cex=0.25)
points(1:10000, badges$silver, col="gray", pch=16, cex=0.25)
points(1:10000, badges$gold, col="orange", pch=16, cex=0.25)
abline(h=ci[1,], lwd=4, lty=2, col="brown")
abline(h=b[4], lwd=4, col="brown")
abline(h=ci[2,], lwd=4, lty=2, col="dim gray")
abline(h=b[5], lwd=4, col="dim gray")
abline(h=ci[3,], lwd=4, lty=2, col="gold")
abline(h=b[6], lwd=4, col="gold")
plot(1:10000, badges$bronze, ylim=c(-0.2, 2.5), col="brown", pch=16, cex=0.35,
xlab="", ylab="Percent Increase in Expected Candies")
points(1:10000, badges$silver, col="gray", pch=16, cex=0.35)
points(1:10000, badges$gold, col="orange", pch=16, cex=0.35)
abline(h=ci[1,], lwd=3, lty=2, col="brown")
abline(h=b[4], lwd=3, col="brown")
abline(h=ci[2,], lwd=3, lty=2, col="dim gray")
abline(h=b[5], lwd=3, col="dim gray")
abline(h=ci[3,], lwd=3, lty=2, col="gold")
abline(h=b[6], lwd=3, col="gold")
plot(1:10000, badges$bronze, ylim=c(-0.2, 2.2), col="brown", pch=16, cex=0.45,
xlab="", ylab="Percent Increase in Expected Candies")
points(1:10000, badges$silver, col="gray", pch=16, cex=0.45)
points(1:10000, badges$gold, col="orange", pch=16, cex=0.45)
abline(h=ci[1,], lwd=3, lty=2, col="brown")
abline(h=b[4], lwd=3, col="brown")
abline(h=ci[2,], lwd=3, lty=2, col="dim gray")
abline(h=b[5], lwd=3, col="dim gray")
abline(h=ci[3,], lwd=3, lty=2, col="gold")
abline(h=b[6], lwd=3, col="gold")
abline(h=b[4], lwd=5, lty=3)
plot(1:10000, badges$bronze, ylim=c(-0.2, 2.2), col="brown", pch=16, cex=0.45,
xlab="", ylab="Percent Increase in Expected Candies")
points(1:10000, badges$silver, col="gray", pch=16, cex=0.45)
points(1:10000, badges$gold, col="orange", pch=16, cex=0.45)
abline(h=b[4], lwd=5, lty=3)
abline(h=b[5], lwd=5, lty=2)
abline(h=b[6], lwd=5, lty=1)
abline(h=ci[1,], lwd=2, lty=3)
abline(h=ci[2,], lwd=2, lty=2)
ci
abline(h=ci[3,], lwd=2, lty=1)
plot(1:10000, badges$bronze, ylim=c(-0.2, 2.2), col="brown", pch=16, cex=0.75,
xlab="", ylab="Percent Increase in Expected Candies")
points(1:10000, badges$silver, col="gray", pch=16, cex=0.75)
points(1:10000, badges$gold, col="orange", pch=16, cex=0.75)
abline(h=b[4], lwd=5, lty=3)
abline(h=b[5], lwd=5, lty=2)
abline(h=b[6], lwd=5, lty=1)
legend("topright", legend=c("Gold", "Silver", "Bronze"), lty=c(1,2,3))
legend("topright", legend=c("Gold", "Silver", "Bronze"), lty=c(1,2,3), lwd=3)
plot(1:10000, badges$bronze, ylim=c(-0.2, 2.2), col="brown", pch=16, cex=0.75,
xlab="", ylab="Percent Increase in Expected Candies")
points(1:10000, badges$silver, col="gray", pch=16, cex=0.75)
points(1:10000, badges$gold, col="orange", pch=16, cex=0.75)
abline(h=exp(b[4])-1, lwd=5, lty=3)
abline(h=exp(b[5])-1, lwd=5, lty=2)
abline(h=exp(b[6])-1, lwd=5, lty=1)
legend("topright", legend=c("Gold", "Silver", "Bronze"), lty=c(1,2,3), lwd=3)
gc()
setwd("~/stat-651/651-final-proj")
library(R2jags)
library(coda)
library(truncnorm)
# Read in data for each inning
cols <- c(1,3:5)
inn1 <- read.csv("inning1.csv", sep=",")[,cols]
inn2 <- read.csv("inning2.csv", sep=",")[,cols]
inn3 <- read.csv("inning3.csv", sep=",")[,cols]
inn4 <- read.csv("inning4.csv", sep=",")[,cols]
inn5 <- read.csv("inning5.csv", sep=",")[,cols]
inn6 <- read.csv("inning6.csv", sep=",")[,cols]
inn7 <- read.csv("inning7.csv", sep=",")[,cols]
inn8 <- read.csv("inning8.csv", sep=",")[,cols]
inn9 <- read.csv("inning9.csv", sep=",")[,cols]
# Combine for one dataset
df <- rbind(inn1, inn2, inn3, inn4, inn5, inn6, inn7, inn8, inn9)
colnames(df) <- c("pitches", "name", "date", "total")
df$inning <- c(
rep(1, nrow(inn1)),
rep(2, nrow(inn2)),
rep(3, nrow(inn3)),
rep(4, nrow(inn4)),
rep(5, nrow(inn5)),
rep(6, nrow(inn6)),
rep(7, nrow(inn7)),
rep(8, nrow(inn8)),
rep(9, nrow(inn9))
)
# cleanup
rm(inn1, inn2, inn3, inn4, inn5, inn6, inn7, inn8, inn9)
df <- df[order(df$name, df$date, df$inning),]
rownames(df) <- 1:nrow(df)
# Remove the final inning of the pitcher's start from each game (usually is not a full inning)
ind <- which(df$inning == 1)[-1] - 1
df <- df[-ind,]
# Divide up data by pitcher
y1 <- df$pitches[df$name=="Buehler, Walker"]
y2 <- df$pitches[df$name=="Eovaldi, Nathan"]
y3 <- df$pitches[df$name=="Wheeler, Zack"]
y4 <- df$pitches[df$name=="Walker, Taijuan"]
y5 <- df$pitches[df$name=="McClanahan, Shane"]
y6 <- df$pitches[df$name=="Fried, Max"]
y <- list(y1,y2,y3,y4,y5,y6)
rm(y1,y2,y3,y4,y5,y6)
N <- unlist(lapply(y, length))
sumY <- unlist(lapply(y, sum))
# EDA
unlist(lapply(y, mean))
# Set up functions for sampling
logPriorA <- function(a) sum(dnorm(a, 16, sqrt(3), log=TRUE))
logPriorB <- function(b) sum(dnorm(b, 1, .25, log=TRUE))
logLikTheta <- function(theta) sum(dgamma(theta, a, b, log=TRUE))
logPrior <- function(a, b, theta) logPriorA(a) + logPriorB(b) + logLikTheta(theta)
logLik <- function(theta) sum(sapply(1:6, function(i) sum(dpois(y[[i]], theta[i], log=TRUE))))
logPost <- function(a, b, theta) logPrior(a, b, theta) + logLik(theta)
logPostAB <- function(a, b) logPrior(a, b, theta) + logLik(theta)
# Helper function for Monte Carlo error
mcErr <- function(draws) {
m <- mean(draws)
ess <- coda::effectiveSize(draws)
m + c(-1,1) * qnorm(.975) * sd(draws)/ess
}
# Helper function for summarizing any set of draws
summ <- function(draws) {
draws <- unname(draws)
med <- apply(draws, 2, median)
credLwr <- apply(draws, 2, quantile, .025)
credUpr <- apply(draws, 2, quantile, .975)
mc <- t(apply(draws, 2, mcErr))
mcLwr <- mc[,1]
mcUpr <- mc[,2]
df <- data.frame(med, credLwr, credUpr, mcLwr, mcUpr)
colnames(df) <- c(
"Median",
"Credible Lower",
"Credible Upper",
"MC Error Lower",
"MC Error Upper"
)
rownames(df) <- c(
"a1", "a2", "a3", "a4", "a5", "a6",
"b1", "b2", "b3", "b4", "b5", "b6",
"theta1", "theta2", "theta3", "theta4", "theta5", "theta6"
)
df
}
nRun <- 1000000
nBurn <- 10000
nThin <- 10
n <- nBurn+nRun
thetaDraws <- matrix(0, nrow=n/nThin, ncol=6)
aDraws <- matrix(0, nrow=n/nThin, ncol=6)
bDraws <- matrix(0, nrow=n/nThin, ncol=6)
aDraws[1,] <- a <- rnorm(6, 16, sqrt(3))
bDraws[1,] <- b <- rnorm(6, 1, 0.25)
thetaDraws[1,] <- theta <- rgamma(6, a, b)
accA <- accB <- 0
tol <- .0001
kA <- 1.5
kB <- 0.4
s1 <- Sys.time()
for (i in 2:n) {
# Update alpha (a)
propA <- runif(6, a - kA, a + kA)
r <- logPostAB(propA, b) - logPostAB(a, b)
if (log(runif(1)) < r) {
a <- propA
accA <- accA + 1
}
# Update beta (b)
lbB <- b - kB
lbB[lbB< tol] <- tol # Keeps the proposal values above zero
propB <- runif(6, lbB, b + kB)
r <- logPostAB(a, propB) - logPostAB(a, b)
if (log(runif(1)) < r) {
b <- propB
accB <- accB + 1
}
# Update theta
theta <- rgamma(6, a+sumY, b+N)
# Storage and thinning
if (i %% nThin == 0) {
j <- i/nThin
thetaDraws[j,] <- theta
aDraws[j,] <- a
bDraws[j,] <- b
}
}
timeMCMC <- Sys.time() - s1
# Burn in
burn <- (nBurn/nThin+1):(n/nThin)
aDraws <- aDraws[burn,]
bDraws <- bDraws[burn,]
thetaDraws <- thetaDraws[burn,]
draws <- cbind(aDraws, bDraws, thetaDraws)
# Acceptance
c(accA,accB)/n
# Effective SS
coda::effectiveSize(thetaDraws)
coda::effectiveSize(aDraws)
coda::effectiveSize(bDraws)
# Trace plots
plot(aDraws[,1], type='l')
plot(bDraws[,1], type='l')
plot(thetaDraws[,1], type='l')
# Model code
model <- "
model {
for (i in 1:6) {
for (j in ind[i]:(ind[i+1] - 1)) {
yL[j] ~ dpois(theta[i])
}
}
for (i in 1:6) {
a[i] ~ dnorm(16, 1/3)
b[i] ~ dnorm(1, 16)
theta[i] ~ dgamma(a[i], b[i])
}
}"
writeLines(model, "baseball.txt")
# Run JAGS
nIter <- 110000
nBurn <- 10000
nCores <- parallel::detectCores()
yL <- unlist(y)
ind <- c(1, cumsum(N)+1)
data.jags <-c('yL', 'ind')
parms <- c('theta', 'a', 'b')
s2 <- Sys.time()
mod.sim <- jags(data=data.jags,inits=NULL,
parameters.to.save=parms,
model.file='baseball.txt',n.iter=nIter,
n.burnin=nBurn,n.chains=nCores,n.thin=5)
timeJAGS <- Sys.time() - s2
# Collect posterior samples
sims <- as.mcmc(mod.sim)
chains <- unname(as.matrix(sims))
aDrawsJags <- chains[,1:6]
bDrawsJags <- chains[,7:12]
thetaDrawsJags <- chains[,14:19]
apply(aDrawsJags, 2, mean)
apply(bDrawsJags, 2, mean)
apply(thetaDrawsJags, 2, mean)
apply(aDrawsJags, 2, median)
apply(bDrawsJags, 2, median)
